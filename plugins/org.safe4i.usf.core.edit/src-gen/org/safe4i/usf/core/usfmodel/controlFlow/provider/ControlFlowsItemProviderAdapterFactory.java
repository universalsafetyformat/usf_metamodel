/**
 * Copyright (c) 2021 itemis AG (www.itemis.com), FZI Forschungszentrum Informatik (www.fzi.de),
 * ScopeSET Technology Deutschland GmbH (https://www.scopeset.de) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */

package org.safe4i.usf.core.usfmodel.controlFlow.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.safe4i.usf.core.usfmodel.USFEditPlugin;
import org.safe4i.usf.core.usfmodel.block.BlockType;
import org.safe4i.usf.core.usfmodel.block.BlocksPackage;
import org.safe4i.usf.core.usfmodel.block.util.BlocksSwitch;
import org.safe4i.usf.core.usfmodel.common.CommonsPackage;
import org.safe4i.usf.core.usfmodel.common.Model;
import org.safe4i.usf.core.usfmodel.common.util.CommonsSwitch;
import org.safe4i.usf.core.usfmodel.controlFlow.ControlFlowsFactory;
import org.safe4i.usf.core.usfmodel.controlFlow.ControlFlowsPackage;
import org.safe4i.usf.core.usfmodel.controlFlow.util.ControlFlowsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class ControlFlowsItemProviderAdapterFactory extends ControlFlowsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(USFEditPlugin.INSTANCE, ControlFlowsPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ControlFlowsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.AssemblyControlFlowConnection} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AssemblyControlFlowConnectionItemProvider assemblyControlFlowConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.AssemblyControlFlowConnection}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAssemblyControlFlowConnectionAdapter() {
		if (assemblyControlFlowConnectionItemProvider == null) {
			assemblyControlFlowConnectionItemProvider = new AssemblyControlFlowConnectionItemProvider(this);
		}

		return assemblyControlFlowConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.DelegateControlFlowConnection} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DelegateControlFlowConnectionItemProvider delegateControlFlowConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.DelegateControlFlowConnection}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDelegateControlFlowConnectionAdapter() {
		if (delegateControlFlowConnectionItemProvider == null) {
			delegateControlFlowConnectionItemProvider = new DelegateControlFlowConnectionItemProvider(this);
		}

		return delegateControlFlowConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.ControlFlowPort} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected ControlFlowPortItemProvider controlFlowPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.ControlFlowPort}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createControlFlowPortAdapter() {
		if (controlFlowPortItemProvider == null) {
			controlFlowPortItemProvider = new ControlFlowPortItemProvider(this);
		}

		return controlFlowPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.DecisionNode} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected DecisionNodeItemProvider decisionNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.DecisionNode}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeAdapter() {
		if (decisionNodeItemProvider == null) {
			decisionNodeItemProvider = new DecisionNodeItemProvider(this);
		}

		return decisionNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.MergeNode} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected MergeNodeItemProvider mergeNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.MergeNode}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeAdapter() {
		if (mergeNodeItemProvider == null) {
			mergeNodeItemProvider = new MergeNodeItemProvider(this);
		}

		return mergeNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.ForkNode} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected ForkNodeItemProvider forkNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.ForkNode}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createForkNodeAdapter() {
		if (forkNodeItemProvider == null) {
			forkNodeItemProvider = new ForkNodeItemProvider(this);
		}

		return forkNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.JoinNode} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected JoinNodeItemProvider joinNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.JoinNode}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeAdapter() {
		if (joinNodeItemProvider == null) {
			joinNodeItemProvider = new JoinNodeItemProvider(this);
		}

		return joinNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.SendSignalNode} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected SendSignalNodeItemProvider sendSignalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.SendSignalNode}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSendSignalNodeAdapter() {
		if (sendSignalNodeItemProvider == null) {
			sendSignalNodeItemProvider = new SendSignalNodeItemProvider(this);
		}

		return sendSignalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.controlFlow.ReceiveSignalNode} instances. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ReceiveSignalNodeItemProvider receiveSignalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.controlFlow.ReceiveSignalNode}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createReceiveSignalNodeAdapter() {
		if (receiveSignalNodeItemProvider == null) {
			receiveSignalNodeItemProvider = new ReceiveSignalNodeItemProvider(this);
		}

		return receiveSignalNodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			final Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose() {
		if (assemblyControlFlowConnectionItemProvider != null) {
			assemblyControlFlowConnectionItemProvider.dispose();
		}
		if (delegateControlFlowConnectionItemProvider != null) {
			delegateControlFlowConnectionItemProvider.dispose();
		}
		if (controlFlowPortItemProvider != null) {
			controlFlowPortItemProvider.dispose();
		}
		if (decisionNodeItemProvider != null) {
			decisionNodeItemProvider.dispose();
		}
		if (mergeNodeItemProvider != null) {
			mergeNodeItemProvider.dispose();
		}
		if (forkNodeItemProvider != null) {
			forkNodeItemProvider.dispose();
		}
		if (joinNodeItemProvider != null) {
			joinNodeItemProvider.dispose();
		}
		if (sendSignalNodeItemProvider != null) {
			sendSignalNodeItemProvider.dispose();
		}
		if (receiveSignalNodeItemProvider != null) {
			receiveSignalNodeItemProvider.dispose();
		}
	}

	/**
	 * A child creation extender for the {@link BlocksPackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public static class BlocksChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		protected static class CreationSwitch extends BlocksSwitch<Object> {
			/**
			 * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseBlockType(BlockType object) {
				newChildDescriptors.add(
						createChildParameter(BlocksPackage.Literals.BLOCK_TYPE__CONTROL_FLOW_PORTS, ControlFlowsFactory.eINSTANCE.createControlFlowPort()));

				newChildDescriptors.add(createChildParameter(BlocksPackage.Literals.BLOCK_TYPE__CONTROL_FLOW_CONNECTIONS,
						ControlFlowsFactory.eINSTANCE.createAssemblyControlFlowConnection()));

				newChildDescriptors.add(createChildParameter(BlocksPackage.Literals.BLOCK_TYPE__CONTROL_FLOW_CONNECTIONS,
						ControlFlowsFactory.eINSTANCE.createDelegateControlFlowConnection()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			final ArrayList<Object> result = new ArrayList<>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public ResourceLocator getResourceLocator() {
			return USFEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link CommonsPackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public static class CommonsChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		protected static class CreationSwitch extends CommonsSwitch<Object> {
			/**
			 * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseModel(Model object) {
				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ControlFlowsFactory.eINSTANCE.createDecisionNode()));

				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ControlFlowsFactory.eINSTANCE.createMergeNode()));

				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ControlFlowsFactory.eINSTANCE.createForkNode()));

				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ControlFlowsFactory.eINSTANCE.createJoinNode()));

				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ControlFlowsFactory.eINSTANCE.createSendSignalNode()));

				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ControlFlowsFactory.eINSTANCE.createReceiveSignalNode()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			final ArrayList<Object> result = new ArrayList<>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public ResourceLocator getResourceLocator() {
			return USFEditPlugin.INSTANCE;
		}
	}

}
