/**
 * Copyright (c) 2021 itemis AG (www.itemis.com), FZI Forschungszentrum Informatik (www.fzi.de),
 * ScopeSET Technology Deutschland GmbH (https://www.scopeset.de) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */

package org.safe4i.usf.core.usfmodel.errorHandling.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.safe4i.usf.core.usfmodel.USFEditPlugin;
import org.safe4i.usf.core.usfmodel.block.BlockType;
import org.safe4i.usf.core.usfmodel.block.BlocksPackage;
import org.safe4i.usf.core.usfmodel.block.util.BlocksSwitch;
import org.safe4i.usf.core.usfmodel.common.CommonsPackage;
import org.safe4i.usf.core.usfmodel.common.Model;
import org.safe4i.usf.core.usfmodel.common.util.CommonsSwitch;
import org.safe4i.usf.core.usfmodel.controlFlow.ControlFlowsPackage;
import org.safe4i.usf.core.usfmodel.controlFlow.DecisionNode;
import org.safe4i.usf.core.usfmodel.controlFlow.ForkNode;
import org.safe4i.usf.core.usfmodel.controlFlow.JoinNode;
import org.safe4i.usf.core.usfmodel.controlFlow.MergeNode;
import org.safe4i.usf.core.usfmodel.controlFlow.ReceiveSignalNode;
import org.safe4i.usf.core.usfmodel.controlFlow.SendSignalNode;
import org.safe4i.usf.core.usfmodel.controlFlow.util.ControlFlowsSwitch;
import org.safe4i.usf.core.usfmodel.errorHandling.ErrorHandlingFactory;
import org.safe4i.usf.core.usfmodel.errorHandling.ErrorHandlingPackage;
import org.safe4i.usf.core.usfmodel.errorHandling.util.ErrorHandlingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class ErrorHandlingItemProviderAdapterFactory extends ErrorHandlingAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(USFEditPlugin.INSTANCE,
			ErrorHandlingPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ErrorHandlingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.errorHandling.ErrorHandler} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected ErrorHandlerItemProvider errorHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.errorHandling.ErrorHandler}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createErrorHandlerAdapter() {
		if (errorHandlerItemProvider == null) {
			errorHandlerItemProvider = new ErrorHandlerItemProvider(this);
		}

		return errorHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.errorHandling.ErrorDataPort} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected ErrorDataPortItemProvider errorDataPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.errorHandling.ErrorDataPort}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createErrorDataPortAdapter() {
		if (errorDataPortItemProvider == null) {
			errorDataPortItemProvider = new ErrorDataPortItemProvider(this);
		}

		return errorDataPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.safe4i.usf.core.usfmodel.errorHandling.ErrorControlFlowPort} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ErrorControlFlowPortItemProvider errorControlFlowPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.safe4i.usf.core.usfmodel.errorHandling.ErrorControlFlowPort}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createErrorControlFlowPortAdapter() {
		if (errorControlFlowPortItemProvider == null) {
			errorControlFlowPortItemProvider = new ErrorControlFlowPortItemProvider(this);
		}

		return errorControlFlowPortItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			final Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose() {
		if (errorHandlerItemProvider != null) {
			errorHandlerItemProvider.dispose();
		}
		if (errorDataPortItemProvider != null) {
			errorDataPortItemProvider.dispose();
		}
		if (errorControlFlowPortItemProvider != null) {
			errorControlFlowPortItemProvider.dispose();
		}
	}

	/**
	 * A child creation extender for the {@link BlocksPackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public static class BlocksChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		protected static class CreationSwitch extends BlocksSwitch<Object> {
			/**
			 * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseBlockType(BlockType object) {
				newChildDescriptors
						.add(createChildParameter(BlocksPackage.Literals.BLOCK_TYPE__DATA_FLOW_PORTS, ErrorHandlingFactory.eINSTANCE.createErrorDataPort()));

				newChildDescriptors.add(createChildParameter(BlocksPackage.Literals.BLOCK_TYPE__CONTROL_FLOW_PORTS,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			final ArrayList<Object> result = new ArrayList<>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public ResourceLocator getResourceLocator() {
			return USFEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link CommonsPackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public static class CommonsChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		protected static class CreationSwitch extends CommonsSwitch<Object> {
			/**
			 * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseModel(Model object) {
				newChildDescriptors.add(createChildParameter(CommonsPackage.Literals.MODEL__CONTENT, ErrorHandlingFactory.eINSTANCE.createErrorHandler()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			final ArrayList<Object> result = new ArrayList<>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public ResourceLocator getResourceLocator() {
			return USFEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link ControlFlowsPackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public static class ControlFlowsChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		protected static class CreationSwitch extends ControlFlowsSwitch<Object> {
			/**
			 * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseDecisionNode(DecisionNode object) {
				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.DECISION_NODE__IN_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.DECISION_NODE__OUT_CONTROL_FLOW_PORT_TRUE,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.DECISION_NODE__OUT_CONTROL_FLOW_PORT_FALSE,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.DECISION_NODE__IN_DATA_FLOW_PORTS,
						ErrorHandlingFactory.eINSTANCE.createErrorDataPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseMergeNode(MergeNode object) {
				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.MERGE_NODE__IN_CONTROL_FLOW_PORTS,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.MERGE_NODE__OUT_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseForkNode(ForkNode object) {
				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.FORK_NODE__IN_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.FORK_NODE__OUT_CONTROL_FLOW_PORTS,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseJoinNode(JoinNode object) {
				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.JOIN_NODE__IN_CONTROL_FLOW_PORTS,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.JOIN_NODE__OUT_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseSendSignalNode(SendSignalNode object) {
				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.SEND_SIGNAL_NODE__IN_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.SEND_SIGNAL_NODE__OUT_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			@Override
			public Object caseReceiveSignalNode(ReceiveSignalNode object) {
				newChildDescriptors.add(createChildParameter(ControlFlowsPackage.Literals.RECEIVE_SIGNAL_NODE__OUT_CONTROL_FLOW_PORT,
						ErrorHandlingFactory.eINSTANCE.createErrorControlFlowPort()));

				return null;
			}

			/**
			 * <!-- begin-user-doc --> <!-- end-user-doc -->
			 * 
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			final ArrayList<Object> result = new ArrayList<>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc --> <!-- end-user-doc -->
		 * 
		 * @generated
		 */
		@Override
		public ResourceLocator getResourceLocator() {
			return USFEditPlugin.INSTANCE;
		}
	}

}
